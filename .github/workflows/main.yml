
name: Deploy saleor-k8s-staging

# Controls when the workflow will run
on:

  push:
    branches: [ "dea-eks-migration" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  test:
    runs-on: ubuntu-latest
     # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3
       
       # Set up Python
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
       
       # Set up Chart Testing to lint helm charts
      - name: Set Up Chart-Testing
        uses: helm/chart-testing-action@v2.2.1
        with:
          version: v3.5.1
       
       # Lint helm charts
      - name: Run Chart-Testing (lint)
        run: ct lint --all --validate-maintainers=false
       
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           aws-region: eu-west-2
      
      # Create dump from saleor database
      - name: Postgres Dump Backup
        uses: tj-actions/pg-dump@v2.3
        with:
          database_url: "postgres://postgres:${{ secrets.RDS_PASSWORD }}@saleor-db.cnriqanxmgua.eu-west-2.rds.amazonaws.com:5432/saleor-db"
          path: "saleor.dump" 
          options: "-O"   

       # Deploy helm charts to the cluster
      - name: Deploy Helm Chart & Restore saleor-db
        uses: koslibpro/helm-eks-action@master
        env:
           KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          command: |
            aws eks --region eu-west-2 update-kubeconfig --name dea-01
            kubectl config use-context arn:aws:eks:eu-west-2:370849260309:cluster/dea-01
            cd charts/saleor-platform/
            helm repo add bitnami-pre-2022 https://raw.githubusercontent.com/bitnami/charts/eb5f9a9513d987b519f0ecd732e7031241c50328/bitnami
            helm repo add nfs-server-provisioner https://kvaps.github.io/charts
            helm repo update
            helm dependency update
            cd ../..

            helm upgrade --install saleor-k8s-staging --namespace saleor-k8s-staging --values charts/saleor-platform/values.yaml ./charts/saleor-platform 
            kubectl exec -it saleor-k8s-staging-postgresql-0 -n saleor-k8s-staging -- psql postgres://postgres:dpkvvVpy5ZaSB2CP@saleor-k8s-staging-postgresql:5432/saleor-db < saleor.dump
  deploy:
    runs-on: ubuntu-latest
    needs: build
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Argocd CLI
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd

      # Argocd login and create 'saleor-k8s-staging' app if it doesn't already exist
      - name: Create Argocd Application
        run: | 
          argocd login argocd.hack.cloudnative.nttdatauk.cloud --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.DEA_ARGOCD_PASSWORD }}
          LIST=$(argocd app list -o name)
          APPS=($LIST)
          if [[ " ${APPS[*]} " =~ "saleor-k8s-staging" ]]
          then
            echo "Application saleor-k8s-staging exists"
            # argocd app sync saleor-k8s-staging --replace --prune --force
          else 
            echo "Application saleor-k8s-staging does not exist"
            argocd app create saleor-k8s-staging --repo git@github.com:tallulah-carlisle/saleor-strapi-local.git --dest-server https://kubernetes.default.svc --dest-namespace saleor-k8s-staging  --path charts/saleor-platform 
          fi 
